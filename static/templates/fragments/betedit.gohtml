<div id="editBetForm" class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
  <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">
    Edit Bet
  </h2>
  <form
    id="editBetForm"
    class="grid grid-cols-1 gap-6"
    hx-put="/update-bet/{{.Bet.BetID}}"
    hx-swap="outerHTML"
    hx-target="#editBetForm"
    hx-trigger="submit"
    hx-encoding="multipart/form-data"
  >
    <input type="hidden" name="BetID" value="{{.Bet.BetID}}" />
    <input
      type="text"
      name="Title"
      value="{{.Bet.Title}}"
      placeholder="Bet Title"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    />
    <textarea
      name="Description"
      placeholder="Bet Description"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    >{{.Bet.Description}}</textarea>
    <input type="hidden" name="Status" value="{{.Bet.Status}}" />
    <select
      name="Category"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    >
      <option value="future" {{if eq .Bet.Category "future"}}selected{{end}}>Future</option>
      <option value="matchup" {{if eq .Bet.Category "matchup"}}selected{{end}}>Matchup</option>
      <option value="prop" {{if eq .Bet.Category "prop"}}selected{{end}}>Prop</option>
    </select>
    <p class="text-gray-500 text-center">Bet expiry time.</p>
    <div class="relative">
      <input
        type="text"
        id="ExpiryTimeDisplay"
        placeholder="Expiry Time"
        class="w-full p-4 bg-white rounded-lg shadow-md flatpickr-input"
        required
      />
      <input type="hidden" id="ExpiryTime" name="ExpiryTime" value="{{.Bet.ExpiryTime.Format "2006-01-02T15:04:05Z07:00"}}" required />
    </div>
    <!-- Bet Outcomes Section -->
    <div
      id="betOutcomesContainer"
      class="w-full p-4 bg-white rounded-lg shadow-md"
    >
      <h3 class="text-xl font-semibold mb-2 text-center">Bet Outcomes</h3>
      <p class="text-gray-500 text-center text-sm">
        All odds must be in American format, + odds leave blank, minus odds put
        the -.
      </p>
      <p class="text-gray-500 text-center text-sm mb-4">
        Outcome descriptions cannot be modified. You can only update the odds.
      </p>
      <div id="betOutcomesInputs" class="space-y-4">
        {{range $index, $outcome := .Bet.BetOutcomes}}
          <div class="flex flex-col sm:flex-row items-center gap-4">
            <input
              type="text"
              name="OutcomeDescription[]"
              value="{{$outcome.Description}}"
              placeholder="Outcome Description"
              class="w-full sm:w-2/5 p-2 bg-gray-100 rounded"
              readonly
            />
            <input
              type="number"
              step="0.01"
              name="Odds[]"
              value="{{$outcome.Odds}}"
              placeholder="Odds"
              class="w-full sm:w-1/5 p-2 bg-white rounded"
              required
            />
          </div>
        {{end}}
      </div>
    </div>
    <button
      type="submit"
      class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
    >
      Update Bet
    </button>
  </form>
</div>

<!-- Error Modal -->
<div
  id="errorModal"
  class="fixed z-10 inset-0 overflow-y-auto hidden"
  aria-labelledby="modal-title"
  role="dialog"
  aria-modal="true"
>
  <div
    class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
  >
    <div
      class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
      aria-hidden="true"
    ></div>
    <span
      class="hidden sm:inline-block sm:align-middle sm:h-screen"
      aria-hidden="true"
      >&#8203;</span
    >
    <div
      class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
    >
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
            <h3
              class="text-lg leading-6 font-medium text-gray-900"
              id="modal-title"
            >
              Form Errors
            </h3>
            <div class="mt-2">
              <p class="text-sm text-gray-500" id="errorMessage"></p>
            </div>
          </div>
        </div>
      </div>
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button
          type="button"
          onclick="closeErrorModal()"
          class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function showErrorModal(message) {
    const modal = document.getElementById("errorModal");
    const errorMessage = document.getElementById("errorMessage");
    if (modal && errorMessage) {
      errorMessage.textContent = message;
      modal.classList.remove("hidden");
    } else {
      console.log("Error modal elements not found. Error message:", message);
    }
  }

  function closeErrorModal() {
    const modal = document.getElementById("errorModal");
    if (modal) {
      modal.classList.add("hidden");
    } else {
      console.log("Error modal element not found");
    }
  }

  function initFlatpickr() {
    const expiryTimeDisplay = document.getElementById("ExpiryTimeDisplay");
    const expiryTimeInput = document.getElementById("ExpiryTime");

    if (!expiryTimeDisplay || !expiryTimeInput) {
      // console.log("Expiry time elements not found");
      return;
    }

    flatpickr(expiryTimeDisplay, {
      enableTime: true,
      dateFormat: "Z",
      altInput: true,
      altFormat: "F j, Y at h:i K",
      minDate: "today",
      time_24hr: false,
      defaultDate: expiryTimeInput.value,
      onChange: function (selectedDates, dateStr, instance) {
        updateExpiryTime(selectedDates[0]);
      },
    });

    // Set the initial value for the hidden input
    updateExpiryTime(new Date(expiryTimeInput.value));
  }

  function updateExpiryTime(date) {
    const expiryTimeInput = document.getElementById("ExpiryTime");
    if (!expiryTimeInput) {
      console.log("Expiry time input element not found");
      return;
    }

    if (date) {
      expiryTimeInput.value = date.toISOString();
    } else {
      expiryTimeInput.value = "";
    }
  }

  document.addEventListener("htmx:configRequest", (event) => {
    if (event.detail.elt.id === "editBetForm") {
      const form = event.detail.elt;
      if (!form) {
        console.log("Edit bet form not found");
        event.preventDefault();
        return;
      }

      // Perform form validation
      const editableRequiredFields = form.querySelectorAll("[required]:not([readonly])");
      for (let field of editableRequiredFields) {
        if (!field.value.trim()) {
          showErrorModal(`Please fill out the ${field.name} field.`);
          event.preventDefault();
          return;
        }
      }
    }
  });

  document.addEventListener("htmx:afterSettle", (event) => {
    if (event.detail.elt.id === "editBetForm") {
      // Check if the response indicates success
      if (event.detail.xhr.responseText.includes("Bet updated successfully")) {
        // Trigger a click on the Admin Dashboard link
        const adminDashboardLink = document.querySelector('a[href="/admindashboard"]');
        if (adminDashboardLink) {
          adminDashboardLink.click();
        } else {
          console.log("Admin Dashboard link not found");
        }
      } else {
        showErrorModal("Failed to update bet. Please try again.");
      }
    }
  });

  initFlatpickr();
  document.addEventListener("DOMContentLoaded", initFlatpickr);
  document.addEventListener("htmx:afterSwap", initFlatpickr);
</script>