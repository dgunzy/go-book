<div id="createBetForm" class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
  <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">
    Create New Bet
  </h2>
  <form id="newBetForm" class="grid grid-cols-1 gap-6">
    <input
      type="text"
      name="Title"
      placeholder="Bet Title"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    />
    <textarea
      name="Description"
      placeholder="Bet Description"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    ></textarea>
    <input type="hidden" name="Status" value="pending" />
    <select
      name="Category"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    >
      <option value="future">Future</option>
      <option value="matchup">Matchup</option>
      <option value="prop">Prop</option>
    </select>
    <p class="text-gray-500 text-center">Bet expiry time.</p>
    <input
      type="datetime-local"
      name="ExpiryTime"
      id="ExpiryTime"
      placeholder="Expiry Time"
      value="{{.DefaultExpiryTime}}"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    />
    <!-- Bet Outcomes Section -->
    <div
      id="betOutcomesContainer"
      class="w-full p-4 bg-white rounded-lg shadow-md"
    >
      <h3 class="text-xl font-semibold mb-2 text-center">Bet Outcomes</h3>
      <p class="text-gray-500 text-center text-sm">
        All odds must be in American format, + odds leave blank, minus odds put
        the -.
      </p>
      <p class="text-gray-500 text-center text-sm mb-4">
        All Descriptions must be unique and not empty.
      </p>
      <div id="betOutcomesContainer" class="space-y-4">
        <div class="flex flex-col sm:flex-row items-center gap-4">
          <input
            type="text"
            name="OutcomeDescription[]"
            placeholder="Outcome Description"
            class="w-full sm:w-2/5 p-2 bg-gray-100 rounded"
            required
          />
          <input
            type="number"
            step="0.01"
            name="Odds[]"
            placeholder="Odds"
            class="w-full sm:w-1/5 p-2 bg-gray-100 rounded"
            required
          />
          <button
            type="button"
            onclick="addOutcome()"
            class="w-full sm:w-auto bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-2 sm:mt-0"
          >
            Add Outcome
          </button>
        </div>
      </div>
    </div>
    <button
      hx-get="/view-bannable-users"
      hx-swap="outerHTML"
      id="viewBannableUsers"
      hx-target="#viewBannableUsers"
      class="w-full bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
    >
      View Bannable Users
    </button>
    <button
      id="submitButton"
      hx-post="/create-new-bet"
      hx-swap="outerHTML"
      hx-target="#createBetForm"
      type="button"
      class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
    >
      Create Bet
    </button>
  </form>
</div>

<!-- Error Modal -->
<div
  id="errorModal"
  class="fixed z-10 inset-0 overflow-y-auto hidden"
  aria-labelledby="modal-title"
  role="dialog"
  aria-modal="true"
>
  <div
    class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
  >
    <div
      class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
      aria-hidden="true"
    ></div>
    <span
      class="hidden sm:inline-block sm:align-middle sm:h-screen"
      aria-hidden="true"
      >&#8203;</span
    >
    <div
      class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
    >
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
            <h3
              class="text-lg leading-6 font-medium text-gray-900"
              id="modal-title"
            >
              Form Errors
            </h3>
            <div class="mt-2">
              <p class="text-sm text-gray-500" id="errorMessage"></p>
            </div>
          </div>
        </div>
      </div>
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button
          type="button"
          onclick="closeErrorModal()"
          class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Set default expiry time (1 week from now)

  function addOutcome() {
    const container = document.getElementById("betOutcomesContainer");
    const outcomeDiv = document.createElement("div");
    outcomeDiv.className = "flex flex-col sm:flex-row items-center gap-4 mt-4";
    outcomeDiv.innerHTML = `
      <input
        type="text"
        name="OutcomeDescription[]"
        placeholder="Outcome Description"
        class="w-full sm:w-2/5 p-2 bg-gray-100 rounded"
        required
      />
      <input
        type="number"
        step="0.01"
        name="Odds[]"
        placeholder="Odds"
        class="w-full sm:w-1/5 p-2 bg-gray-100 rounded"
        required
      />
      <button
        type="button"
        onclick="this.parentElement.remove()"
        class="w-full sm:w-auto bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-2 sm:mt-0"
      >
        Remove
      </button>
    `;
    container.appendChild(outcomeDiv);
  }

  function showErrorModal(message) {
    const modal = document.getElementById("errorModal");
    const errorMessage = document.getElementById("errorMessage");
    errorMessage.textContent = message;
    modal.classList.remove("hidden");
  }

  function closeErrorModal() {
    const modal = document.getElementById("errorModal");
    modal.classList.add("hidden");
  }

  document.addEventListener("htmx:configRequest", (event) => {
    if (event.detail.elt.id === "submitButton") {
      const form = document.getElementById("newBetForm");
      const formData = new FormData(form);

      // Perform form validation
      const requiredFields = form.querySelectorAll("[required]");
      for (let field of requiredFields) {
        if (!field.value.trim()) {
          showErrorModal(`Please fill out the ${field.name} field.`);
          event.preventDefault();
          return;
        }
      }

      // Check if there's at least one outcome
      const outcomes = form.querySelectorAll(
        'input[name="OutcomeDescription[]"]'
      );
      if (outcomes.length === 0) {
        showErrorModal("Please add at least one outcome.");
        event.preventDefault();
        return;
      }

      // Check for unique outcome descriptions
      const descriptions = Array.from(outcomes).map((input) =>
        input.value.trim()
      );
      if (new Set(descriptions).size !== descriptions.length) {
        showErrorModal("All outcome descriptions must be unique.");
        event.preventDefault();
        return;
      }

      // If all validations pass, allow the HTMX request to proceed
      event.detail.parameters = Object.fromEntries(formData);
    }
  });
</script>
