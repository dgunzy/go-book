<div id="createBetForm" class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
  <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">
    Create New Bet
  </h2>
  <form
    id="newBetForm"
    class="grid grid-cols-1 gap-6"
    hx-post="/create-new-bet"
    hx-swap="outerHTML"
    hx-target="#createBetForm"
    hx-trigger="submit"
    hx-encoding="multipart/form-data"
  >
    <input
      type="text"
      name="Title"
      placeholder="Bet Title"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    />
    <textarea
      name="Description"
      placeholder="Bet Description"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    ></textarea>
    <input type="hidden" name="Status" value="open" />
    <select
      name="Category"
      class="w-full p-4 bg-white rounded-lg shadow-md"
      required
    >
      <option value="future">Future</option>
      <option value="matchup">Matchup</option>
      <option value="prop">Prop</option>
    </select>
    <p class="text-gray-500 text-center">Bet expiry time.</p>
    <div class="relative">
      <input
        type="text"
        id="ExpiryTimeDisplay"
        placeholder="Expiry Time"
        class="w-full p-4 bg-white rounded-lg shadow-md flatpickr-input"
        required
      />
      <input type="hidden" id="ExpiryTime" name="ExpiryTime" required />
    </div>
    <!-- Bet Outcomes Section -->
    <div
      id="betOutcomesContainer"
      class="w-full p-4 bg-white rounded-lg shadow-md"
    >
      <h3 class="text-xl font-semibold mb-2 text-center">Bet Outcomes</h3>
      <p class="text-gray-500 text-center text-sm">
        All odds must be in American format, + odds leave blank, minus odds put
        the -.
      </p>
      <p class="text-gray-500 text-center text-sm mb-4">
        All Descriptions must be unique and not empty.
      </p>
      <div id="betOutcomesInputs" class="space-y-4">
        <div class="flex flex-col sm:flex-row items-center gap-4">
          <input
            type="text"
            name="OutcomeDescription[]"
            placeholder="Outcome Description"
            class="w-full sm:w-2/5 p-2 bg-gray-100 rounded"
            required
          />
          <input
            type="number"
            step="0.01"
            name="Odds[]"
            placeholder="Odds"
            class="w-full sm:w-1/5 p-2 bg-gray-100 rounded"
            required
          />
          <button
            type="button"
            onclick="addOutcome()"
            class="w-full sm:w-auto bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mt-2 sm:mt-0"
          >
            Add Outcome
          </button>
        </div>
      </div>
    </div>
    <button
      type="button"
      hx-get="/view-bannable-users"
      hx-swap="outerHTML"
      id="viewBannableUsers"
      hx-target="#viewBannableUsers"
      class="w-full bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
    >
      View Bannable Users
    </button>
    <button
      id="submitButton"
      type="submit"
      class="w-full bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
    >
      Create Bet
    </button>
  </form>
</div>

<!-- Error Modal -->
<div
  id="errorModal"
  class="fixed z-10 inset-0 overflow-y-auto hidden"
  aria-labelledby="modal-title"
  role="dialog"
  aria-modal="true"
>
  <div
    class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
  >
    <div
      class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
      aria-hidden="true"
    ></div>
    <span
      class="hidden sm:inline-block sm:align-middle sm:h-screen"
      aria-hidden="true"
      >&#8203;</span
    >
    <div
      class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
    >
      <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
            <h3
              class="text-lg leading-6 font-medium text-gray-900"
              id="modal-title"
            >
              Form Errors
            </h3>
            <div class="mt-2">
              <p class="text-sm text-gray-500" id="errorMessage"></p>
            </div>
          </div>
        </div>
      </div>
      <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
        <button
          type="button"
          onclick="closeErrorModal()"
          class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  function addOutcome() {
    const container = document.getElementById("betOutcomesInputs");
    const outcomeDiv = document.createElement("div");
    outcomeDiv.className = "flex flex-col sm:flex-row items-center gap-4 mt-4";
    outcomeDiv.innerHTML = `
      <input
        type="text"
        name="OutcomeDescription[]"
        placeholder="Outcome Description"
        class="w-full sm:w-2/5 p-2 bg-gray-100 rounded"
        required
      />
      <input
        type="number"
        step="0.01"
        name="Odds[]"
        placeholder="Odds"
        class="w-full sm:w-1/5 p-2 bg-gray-100 rounded"
        required
      />
      <button
        type="button"
        onclick="this.parentElement.remove()"
        class="w-full sm:w-auto bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded mt-2 sm:mt-0"
      >
        Remove
      </button>
    `;
    container.appendChild(outcomeDiv);
  }

  function showErrorModal(message) {
    const modal = document.getElementById("errorModal");
    const errorMessage = document.getElementById("errorMessage");
    errorMessage.textContent = message;
    modal.classList.remove("hidden");
  }

  function closeErrorModal() {
    const modal = document.getElementById("errorModal");
    modal.classList.add("hidden");
  }

  function initFlatpickr() {
    console.log("Initializing Flatpickr");
    const defaultDate = new Date(
      new Date().getTime() + 7 * 24 * 60 * 60 * 1000
    );

    flatpickr("#ExpiryTimeDisplay", {
      enableTime: true,
      dateFormat: "Z",
      altInput: true,
      altFormat: "F j, Y at h:i K",
      minDate: "today",
      time_24hr: false,
      defaultDate: defaultDate,
      onChange: function (selectedDates, dateStr, instance) {
        updateExpiryTime(selectedDates[0]);
      },
    });

    // Set the initial value for the hidden input
    updateExpiryTime(defaultDate);
  }

  function updateExpiryTime(date) {
    const expiryTimeInput = document.getElementById("ExpiryTime");
    if (date) {
      expiryTimeInput.value = date.toISOString();
      console.log("ExpiryTime updated:", expiryTimeInput.value);
    } else {
      expiryTimeInput.value = "";
      console.log("No date selected");
    }
  }

  // Add event listener to the form submission
  document
    .getElementById("newBetForm")
    .addEventListener("submit", function (event) {
      const expiryTimeInput = document.getElementById("ExpiryTime");
      if (!expiryTimeInput.value) {
        event.preventDefault(); // Prevent form submission
        showErrorModal("Please select an expiry time.");
      }
    });

  initFlatpickr();
  document.addEventListener("DOMContentLoaded", initFlatpickr);
  document.addEventListener("htmx:afterSwap", initFlatpickr);
</script>
